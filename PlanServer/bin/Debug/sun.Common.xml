<?xml version="1.0"?>
<doc>
<assembly>
<name>
sun.Common
</name>
</assembly>
<members>
<member name="P:sun.Common.KeyValueList.AutoToKeyLower">
	<summary>
 自动把key转为小写，默认否。
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:sun.Common.KeyValueList.AutoRemoveHasExist">
	<summary>
 在添加时，是否自动删除已存在的key相同的项目
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:sun.Common.KeyValueList.Item(System.Int32)">
	<summary>
 index从0开始
 </summary>
	<param name="index"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueList.getKey(System.Int32)">
	<summary>
 返回Key值
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueList.IsExist(System.String)">
	<summary>
 不分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueList.IndexOf(System.String)">
	<summary>
 返回键值的index位置,不分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:sun.Common.KeyValueList">
	<summary>
 key不区分大小写
 </summary>
	<remarks></remarks>
</member><member name="M:sun.Common.Compile.CompileExecutable(System.String,System.String)">
	<summary>
 编译文件，成功后可以调用  Dim a As [Assembly] = [Assembly].LoadFrom(DLLName) '加载DLL
   Dim myType As System.Type = a.GetType("sun.class1") '获得Class1的Type
   Dim obj As Object = Activator.CreateInstance(myType) '获得Class1的实例, obj.hell()
 </summary>
	<param name="sourceName">类文件的全路径，如 d:\classfile1.vb</param>
	<param name="DLLName">编译后的DLL文件存放的位置,如 d:\classfile1.dll</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:sun.Common.EnumType.FieldTypeEnum.ExtColor">
	<summary>
 扩展类型:颜色
 </summary>
	<remarks></remarks>
</member><member name="F:sun.Common.EnumType.EditControlEnum.TextBoxPopup">
	<summary>
 弹出多行文本框
 </summary>
	<remarks></remarks>
</member><member name="F:sun.Common.EnumType.EditControlEnum.ValueTextBoxAjaxDown">
	<summary>
 使用ZjkValueTextBoxAjaxDown控件的EditDataSourcePID来获取数据
 </summary>
	<remarks></remarks>
</member><member name="M:sun.Common.EnumType.getEnumValueList(System.Type)">
	<summary>
 获取枚举类型的值,按值大小排序
 </summary>
	<param name="enumType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:sun.Common.TSortedListComparer">
	<summary>
 SortedList可以输入重复key的比较器
 </summary>
	<remarks></remarks>
</member><member name="P:sun.Common.KeyValueListOf`2.Item(System.Int32)">
	<summary>
 index从0开始
 </summary>
	<param name="index"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`2.FindByKey(`0)">
	<summary>
 按key查找，如果没找到返回空
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`2.getKey(System.Int32)">
	<summary>
 返回Key值
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`2.getItem(System.Int32)">
	<summary>
 index从0开始
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`2.IsExist(`0)">
	<summary>
 区分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`2.getKeyIndex(`0)">
	<summary>
 区分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:sun.Common.KeyValueListOf`2">
	<summary>
 ' key区分大小写
 </summary>
	<typeparam name="TKey"></typeparam>
	<typeparam name="TValue"></typeparam>
	<remarks></remarks>
</member><member name="M:sun.Common.SerializerUtil.ObjectToXmlFile(System.Object,System.String)">
	<summary>
 将对象序列化为 XML 档案。
 </summary>
	<param name="Value">物件。</param>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.XmlFileToObject(System.String,System.Type)">
	<summary>
 将 XML 档案反序列化为对象。
 </summary>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToXml(System.Object)">
	<summary>
 将对象序列化为 XML 字符串。
 </summary>
	<param name="Value">物件。</param>
</member><member name="M:sun.Common.SerializerUtil.XmlToObject(System.String,System.Type)">
	<summary>
 将 XML 字符串反序列化为对象。
 </summary>
	<param name="Text">XML 字符串。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToSoapFile(System.Object,System.String)">
	<summary>
 将对象序列化为 Soap 档案。
 </summary>
	<param name="Value">物件。</param>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.SoapFileToObject(System.String,System.Type)">
	<summary>
 将 Soap 档案反序列化为对象。
 </summary>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToSoap(System.Object)">
	<summary>
 将对象序列化为 Soap 字符串。
 </summary>
	<param name="Value">物件。</param>
</member><member name="M:sun.Common.SerializerUtil.SoapToObject(System.String,System.Type)">
	<summary>
 将 Soap 字符串反序列化为对象。
 </summary>
	<param name="Text">Soap 字符串。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToBinaryFile(System.Object,System.String)">
	<summary>
 将对象序列化为 Binary 档案。
 </summary>
	<param name="Value">物件。</param>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.BinaryFileToObject(System.String)">
	<summary>
 将 Binary 档案反序列化为对象。
 </summary>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToBinary(System.Object)">
	<summary>
 将对象序列化为 Binary 数据。
 </summary>
	<param name="Value">物件。</param>
</member><member name="M:sun.Common.SerializerUtil.BinaryToObject(System.Byte[],System.Type)">
	<summary>
 将 Binary 数据反序列化为对象。
 </summary>
	<param name="Buffer">Binary 资料。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToJsonFile(System.Object,System.String)">
	<summary>
 将对象序列化为 Json 档案。
 </summary>
	<param name="Value">物件。</param>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.JsonFileToObjec(System.String,System.Type)">
	<summary>
 将 Json 档案反序列化为对象。
 </summary>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToJson(System.Object)">
	<summary>
 将对象序列化为 Json 字符串。
 </summary>
	<param name="Value">物件。</param>
</member><member name="M:sun.Common.SerializerUtil.JsonToObject(System.String,System.Type)">
	<summary>
 将 Json 字符串反序列化为对象。
 </summary>
	<param name="Text">Json 字符串。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToDataContractFile(System.Object,System.String)">
	<summary>
 将对象序列化为 DataContract 档案。
 </summary>
	<param name="Value">物件。</param>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.DataContractFileToObject(System.String,System.Type)">
	<summary>
 将 DataContract 档案反序列化为对象。
 </summary>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.SerializerUtil.ObjectToDataContract(System.Object)">
	<summary>
 将对象序列化为 DataContract 字符串。
 </summary>
	<param name="Value">物件。</param>
</member><member name="M:sun.Common.SerializerUtil.DataContractToObject(System.String,System.Type)">
	<summary>
 将 DataContract 字符串反序列化为对象。
 </summary>
	<param name="Text">Json 字符串。</param>
</member><member name="M:sun.Common.SerializerUtil.DataTableToJson(System.Data.DataTable)">
	<summary>
 把DataTable转为JSON
 </summary>
	<param name="dt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.SerializerUtil.TowArryToJson(System.String[0:,0:]@)">
	<summary>
 把二纬组转为JSON
 </summary>
	<param name="towArray"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.SerializerUtil.ConvertDataTableToJsonByName(System.Data.DataTable)">
	<summary>
 按列名称生成JSON, 使用方法: var oServerSideTextBox= document.getElementbyId("ServerSideTextBox");  var oServerJSON_String=eval("("+oServerSideTextBox.value+")"); var rows=oServerJSON.HEAD.length; alert(oServerJSON.HEAD[0].AnyColumnName); 
 </summary>
	<param name="dt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.SerializerUtil.ConvertDataTableToJsonByIndex(System.Data.DataTable)">
	<summary>
 按列索引生成JSON, 使用方法: var oServerSideTextBox= document.getElementbyId("ServerSideTextBox");  var oServerJSON_String=eval("("+oServerSideTextBox.value+")");  var rows=oServerJSON.TABLE[1].ROW.length; var cols=oServerJSON.TABLE[1].ROW[0].COL.length; alert(oServerJSON.TABLE[1].ROW[i].COL[j].DATA);  列标题 alert(oServerJSON.TABLE[0].HEAD[0].COL[j].DATA);
 </summary>
	<param name="dt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.SerializerUtil.ConvertDataRowToJsonByName(System.Data.DataRow)">
	<summary>
 按列名称生成JSON, 使用方法: var oServerSideTextBox= document.getElementbyId("ServerSideTextBox");  var obj=eval("("+oServerSideTextBox.value+")"); for (var i in obj) alert(i + ":" + obj[i]);; 
 </summary>
	<param name="dr"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.SerializerUtil.ConvertKeyValueToJsonByName(sun.Common.KeyValueList)">
	<summary>
 按列名称生成JSON, 使用方法: var oServerSideTextBox= document.getElementbyId("ServerSideTextBox");  var obj=eval("("+oServerSideTextBox.value+")"); for (var i in obj) alert(i + ":" + obj[i]);; 
 </summary>
	<param name="keyValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:sun.Common.SerializerUtil">
	<summary>
 物件序列化与反序化共享函式。
 </summary>
</member><member name="T:sun.Common.THashKeyComparer">
	<summary>
 key不分大小写的Hashtable比较器
 </summary>
	<remarks></remarks>
</member><member name="M:sun.Common.SubTotal.ToSubTotal(System.Data.DataTable,System.Collections.ArrayList,System.Collections.ArrayList,System.Boolean)">
	<summary>
 小计，合计DataTable
 </summary>
	<param name="dataSource"></param>
	<param name="aryGroupFieldIndex">汇总依据，如：仓库。FieldIndex=-1，则为合计</param>
	<param name="aryTotalFieldName">求和字段，如：数量、金额。</param>
	<param name="showGroupbyCol">是否添加GroupbyCol列，如果添加，则GroupbyCol=-1表示合计行，GroupbyCol&gt;=0表示小计行，原始数据行GroupbyCol为空。</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:sun.Common.WinRarHelper.ExistSetupWinRar">
	<summary>
 获取是否安装了WinRar的标识
 </summary>
</member><member name="P:sun.Common.WinRarHelper.WinRarPath">
	<summary>
 获取WinRar.exe路径
 </summary>
</member><member name="M:sun.Common.WinRarHelper.CompressRar(System.String,System.String,System.String)">
	<summary>
 压缩到.rar,这个方法针对目录压缩
 </summary>
	<param name="intputPath">输入目录</param>
	<param name="outputPath">输出目录</param>
	<param name="outputFileName">输出文件名</param>
</member><member name="M:sun.Common.WinRarHelper.UnCompressRar(System.String,System.String)">
	<summary>
 解压.rar
 </summary>
	<param name="inputRarFileName">输入.rar</param>
	<param name="outputPath">输出目录</param>
</member><member name="M:sun.Common.WinRarHelper.CompressFilesToRar(System.Collections.Generic.List{System.String},System.String,System.String)">
	<summary>
 将传入的文件列表压缩到指定的目录下
 </summary>
	<param name="sourceFilesPaths">要压缩的文件路径列表</param>
	<param name="compressFileSavePath">压缩文件存放路径</param>
	<param name="compressFileName">压缩文件名</param>
</member><member name="T:sun.Common.WinRarHelper">
	<summary>
 WinRarHelper 的摘要说明
 </summary>
</member><member name="P:sun.Common.KeyValueListOf`1.Item(System.Int32)">
	<summary>
 index从0开始
 </summary>
	<param name="index"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`1.FindByKey(System.String)">
	<summary>
 按key查找，如果没找到返回空
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`1.getKey(System.Int32)">
	<summary>
 返回Key值
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`1.getKeyIndex(System.String)">
	<summary>
 返回Key的Index
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueListOf`1.IsExist(System.String)">
	<summary>
 不分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:sun.Common.KeyValueListOf`1">
	<summary>
 ' key不区分大小写
 </summary>
	<typeparam name="T"></typeparam>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.ChineseMoney.ConvertData(System.String)">
 转换数字（整数）

</member><member name="M:sun.Common.Functions.ChineseMoney.ConvertXiaoShu(System.String)">
 转换数字（小数部分）

</member><member name="M:sun.Common.Functions.ChineseMoney.ConvertDigit(System.String)">
 转换数字
 转换的字符串（四位以内）

</member><member name="M:sun.Common.Functions.ChineseMoney.Convert4Digit(System.String)">
 转换四位数字

</member><member name="M:sun.Common.Functions.ChineseMoney.Convert3Digit(System.String)">
 转换三位数字

</member><member name="M:sun.Common.Functions.ChineseMoney.Convert2Digit(System.String)">
 转换二位数字

</member><member name="M:sun.Common.Functions.ChineseMoney.ConvertChinese(System.String)">
 将一位数字转换成中文大写数字

</member><member name="T:sun.Common.Functions.ChineseMoney">
	<summary>
 金额大写
 </summary>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.ConvertFileToDBValue(System.String)">
	<summary>
 读取文件到 Byte()
 </summary>
	<param name="FileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.ConvertFileToImage(System.String)">
	<summary>
 读取文件给Image。（替代System.Drawing.Image.FromFile 不会关闭文件）
 </summary>
	<param name="FileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.ConvertImageFileToDBValue(System.String,System.Int32,System.Boolean)">
	<summary>
 读取图片文件到 Byte()
 </summary>
	<param name="fileName"></param>
	<param name="smallSize">缩小后的尺寸(最大边的尺寸)，单位px。-1表示不缩小</param>
	<param name="useMax">如果true，toSmallSize为缩小后的最大边尺寸；如果false，toSmallSize为缩小后的最小边尺寸</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.ConvertStreamToDBValue(System.IO.Stream)">
	<summary>
 把Stream转为数据库值:DBNull或 Byte()
 </summary>
	<param name="stream"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.ConvertImageToDBValue(System.Drawing.Image)">
	<summary>
 把图片转为数据库值:DBNull或 Byte()
 </summary>
	<param name="image"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.SaveDBValueToFile(System.Byte[],System.String)">
	<summary>
 把 byte转为文件
 </summary>
	<param name="dBValue"></param>
	<param name="fileName"></param>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.getScaleImage(System.Drawing.Image,System.Int32,System.Boolean)">
	<summary>
取得缩小图片
 </summary>
	<param name="sourceImage"></param>
	<param name="toSmallSize">缩小后的最小边尺寸，单位px</param>
	<param name="useMax">如果true，toSmallSize为缩小后的最大边尺寸；如果false，toSmallSize为缩小后的最小边尺寸</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.File.ConvertImageToByte(System.Drawing.Image)">
	<summary>
 把Image对象转为 Byte()
 </summary>
	<param name="image"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.Type.FormatData(System.Object)">
	<summary>
 yyyy-MM-dd HH:mm 日期格式
 </summary>
	<param name="Value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.Type.FormatData(System.Object,System.String)">
	<summary>
  yyyy-MM-dd HH:mm:ss 日期格式
 </summary>
	<param name="Value"></param>
	<param name="formatString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.EncryptDecrypt.EncryptText1(System.String)">
	<summary>
 加密
 </summary>
	<param name="strText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.EncryptDecrypt.DecryptText2(System.String)">
	<summary>
  解密
 </summary>
	<param name="strText"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.Registry.SetAppAutoRun(System.String,System.String)">
	<summary>
  设置程序开机后自动运行
 </summary>
	<param name="appName">如 自动备份系统V1.2</param>
	<param name="appPath">d:\soft\autobak.exe</param>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.RenderToString(System.Web.UI.Control)">
	<summary>
 把Web控件输出到字符串
 </summary>
	<param name="control"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.CreateTableHtml(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32[])">
	<summary>
 生成表格结构，返回字符串中的#tdPlaceHolder{i}# 表示td占位符
 </summary>
	<param name="count">记录行数（不是表格行数）</param>
	<param name="cols">每行列数</param>
	<param name="tableAttr">table属性</param>
	<param name="trAttr">tr属性</param>
	<param name="tdAttr">td属性</param>
	<returns>返回HTML    </returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.HasSameDataRow(System.Data.DataTable,System.String,System.Int32@,System.Int32@,System.Boolean)">
	<summary>
 useNoSameWay=false判断数据表是否有相同数据行，如果useNoSameWay=true判断数据表是否有不同数据行
 </summary>
	<param name="dtb"></param>
	<param name="columnName"></param>
	<param name="returnIndex">找到行的原始位置,如果没相同返回-1</param>
	<param name="curIndex">比较值v的位置,如果没相同返回-1</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.HasSameDataRow(System.Data.DataTable,System.String[],System.Int32@)">
	<summary>
 判断数据表是否有相同数据行
 </summary>
	<param name="dtb"></param>
	<param name="columnNames">列数组</param>
	<param name="returnIndex">相同行的原始位置,如果没相同返回-1</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.IsSameDataRow(System.Data.DataRow,System.Data.DataRow)">
	<summary>
 比较数据行的数据是否相同,null当空白处理
 </summary>
	<param name="drw1"></param>
	<param name="drw2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.getSum(System.Data.DataTable,System.String,System.String)">
	<summary>
 求合计,不包括删除删，如果每行都是 DBNull,结果为DBNull
 </summary>
	<param name="dtb"></param>
	<param name="columnName"></param>
	<param name="style">小数位格式，如 0.00</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.getHtml(System.String)">
	<summary>
 返回客户端页面html源
 </summary>
	<param name="url">带http的url</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.ToUpperMoney(System.Object)">
	<summary> 
 将金额转换成大写 
 </summary>
	<param name="value">金额</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.getGetFirstPinyin(System.String)">
	<summary>
 返回中文单词的第一个拼音，如:  回家 -&gt; 'HJ'
 </summary>
	<param name="strr"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.SplitDataTable(System.Data.DataTable,System.Int32,System.Int32)">
	<summary>
 把表的某列数据拆分成多个List。一般用于 sql查询中 in 集合数据量大时，把 in拆分成多条sql
 </summary>
	<param name="dataTable"></param>
	<param name="columnIndex"></param>
	<param name="count">每个List最多的个数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.SplitDataTableToString(System.Data.DataTable,System.Int32,System.Int32)">
	<summary>
 把表的某列数据拆分成多个String (如 1,4,6,7 )。一般用于 sql查询中 in 集合数据量大时，把 in拆分成多条sql
 </summary>
	<param name="dataTable"></param>
	<param name="columnIndex"></param>
	<param name="count">每个String最多的个数</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.getCase(System.Object,System.Object[0:,0:],System.Object)">
	<summary>
 返回Select Case结果，如getCase(2,New Object(,) { {1,"a"},{2,"b"},{3,"c"} })返回  b 
 </summary>
	<param name="parameter">传递的变量</param>
	<param name="part_value">case 情况，用冒号返回结果。如 { {1,"a"},{2,"b"},{3,"c"} }，parameter等于1时返回a,等于3时返回c</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.getChrCount(System.String)">
	<summary>
 返回文本字符个数，中文占2个。如 '1s好'，结果为4
 </summary>
	<param name="text"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.Functions.Left(System.String,System.Int32,System.String)">
	<summary>
 返回字符串左边内容，中文占2个位置。如 Left('你ab',2)='你' 
 </summary>
	<param name="text"></param>
	<param name="length">长度，如 '中2'  的长度为3</param>
	<param name="appendDot">自动加省略号</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:sun.Common.KeyValueGroupListOf`3.Item(System.Int32)">
	<summary>
 index从0开始
 </summary>
	<param name="index"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueGroupListOf`3.getKey(System.Int32)">
	<summary>
 返回Key值
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueGroupListOf`3.getItem(System.Int32)">
	<summary>
 index从0开始
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueGroupListOf`3.getGroup(System.Int32)">
	<summary>
 返回Group值
 </summary>
	<param name="index"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueGroupListOf`3.IsExist(`0)">
	<summary>
 区分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.KeyValueGroupListOf`3.getKeyIndex(`0)">
	<summary>
 区分大小写
 </summary>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:sun.Common.KeyValueGroupListOf`3">
	<summary>
 ' key区分大小写
 </summary>
	<typeparam name="TKey"></typeparam>
	<typeparam name="TValue"></typeparam>
	<remarks></remarks>
</member><member name="F:sun.Common.PageDataStore.CONFIG_PageDataRoot">
	<summary>
 页面持久共享数据存放的磁盘目录，如 e:\PageData
 </summary>
	<remarks></remarks>
</member><member name="F:sun.Common.PageDataStore.SessionItem.Value">
	<summary>
 值，如dataTable
 </summary>
	<remarks></remarks>
</member><member name="M:sun.Common.PageDataStore.#ctor(System.String,System.String)">
	<summary>
	</summary>
	<param name="subFolder">子目录，如session</param>
	<param name="sessionID"></param>
	<remarks></remarks>
</member><member name="P:sun.Common.PageDataStore.Expiration">
	<summary>
 过期时间，单位分。默认0为不过期
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:sun.Common.PageDataStore.Remove(System.Object)">
	<summary>
 删除持久化对象
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:sun.Common.PageDataStore.SavePageData">
	<summary>
 保存到磁盘持久化
 </summary>
	<remarks></remarks>
</member><member name="M:sun.Common.PageDataStore.ObjectToBinaryFile(System.Object,System.String)">
	<summary>
 将对象序列化为 Binary 档案。
 </summary>
	<param name="Value">物件。</param>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.PageDataStore.BinaryFileToObject(System.String)">
	<summary>
 将 Binary 档案反序列化为对象。
 </summary>
	<param name="FileName">文件名称。</param>
</member><member name="M:sun.Common.ColumnDataType.getSQLServerTypeAsFieldTypeEnum(System.String)">
	<summary>
 把SQL server类型转为FieldTypeEnum,如 'datetime'-&gt;EnumType.FieldTypeEnum.DateTime,'varchar'-&gt;EnumType.FieldTypeEnum.String
 </summary>
	<param name="sqlServerType">sql类型</param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>